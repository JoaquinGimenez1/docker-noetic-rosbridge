# This is a basic workflow to help you get started with Actions

name: CI to Docker Hub

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - 
        name: Check Out Repo
        uses: actions/checkout@v2
      -
        name: Set docker hub repo name
        id: set_env
        run: |
          echo "docker_hub_repo_name=noetic-rosbridge" >> $GITHUB_ENV
      -
        name: Docker metadata extraction
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.docker_hub_repo_name }}
      - 
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - 
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: | 
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.docker_hub_repo_name }}:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.docker_hub_repo_name }}:${{ steps.meta.outputs.version }}
      - 
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
